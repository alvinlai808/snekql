snekQL {
  Program      = Exp*
  Exp          = Dec+
               | "if" Exp* ":" Exp* ("elif" Exp* ":" Exp*)* ("else" Exp*)?   -- if
               | "while" Exp ":" Exp*                       -- while
               | "for" id "in" Exp ":" Exp*                  -- for
               | Lvalue "=" Exp                            -- assign
               | "break"                                    -- break
               | Print
               | Exp1

  Dec          = VarDec | FunDec
  FunDec       = "fnc" id Params ":" Exp
  VarDec       = id assignop Exp
  Params       = "(" ListOf<Param, ","> ")"
  Param        = id ":" Type


  Exp1         = Exp1 "or" Exp2                              -- binary
               | Exp2
  Exp2         = Exp2 "and" Exp3                              -- binary
               | Exp3
  Exp3         = Exp4 relop Exp4                            -- binary
               | Exp4
  Exp4         = Exp4 addop Exp5                            -- binary
               | Exp5
  Exp5         = Exp5 mulop Exp6                            -- binary
               | Exp6
  Exp6         = Exp6 "**" Exp7                             --binary
               | Exp7
  Exp7         = "-" Exp8                                   --negation
               | Exp8
  Exp8         = Call | Literal | Lvalue | Rule | Arr

  Literal      = numlit
               | strlit
               | boolit
               | "null"                                    -- null

  Lvalue       = Lvalue "[" Exp "]"                         -- subscripted
               | Lvalue "-" id                              -- field
               | id                                         -- id
  Binding      = id "=" Exp
  Call         = id "(" ListOf<Exp, ","> ")"
  Return       = "return" Exp         -- returnExpression
               | "return"             -- returnNothing

  Type         = "arr" | "boo" | "dub" | "int" | "str"

  keyword      = ("break" | "else" | "false" | "for" | "fnc" | "if" | "in"
               | "null" | "hiss" | "return" | "true" | "while") ~idrest
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"



  Rule         = "@" relop Exp+
  Arr          =  "[" ListOf<Exp, ","> "]"
  Print        = "hiss(" (strlit | Exp) ")"
  numlit       =  digit+ ("." digit+)?
  strlit       = "\"" (~"\""any)* "\""
  boolit       = "true" | "false"

  escape       = "\\" ("\\" | "\"" | "n" | "t")
  assignop     = "=" | "*=" | "/=" | "+=" | "-="
  mulop        = "*" | "%" | "//" |"/" 
  addop        = "+" | "-"
  relop        = "<=" | "!=" | "<" | ">=" | ">" | "=="
  space       := " " | "\t" | "\n" | comment
  comment      = "#" (~"\n" any)*                   --singlelineComment
               | "~~~" (~"~~~:" any)* "~~~:"        --multilineComment

}
