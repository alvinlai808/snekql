snekQL {
  Program      = Statement*
  Statement    = Dec
               | if Exp1 ":" Suite
                 (elif Exp1 ":" Suite)*
                 (else ":" Suite)?                   -- if
               | while Exp1 ":" Suite                -- while
               | for id in Exp1 ":" Suite            -- for
               | Lvalue assignop Exp1                -- assign
               | break                               -- break
               | Return
               | Print
               | Exp1

  Suite        = indent Statement* dedent

  Dec          = VarDec | FunDec
  FunDec       = fnc id Params ":" Suite
  VarDec       = let id ("=" Exp1)?
  Params       = "(" ListOf<Param, ","> ")"
  Param        = id ":" Type

  Exp1         = Exp1 "or" Exp2                      -- binary
               | Exp2
  Exp2         = Exp2 "and" Exp3                     -- binary
               | Exp3
  Exp3         = Exp4 relop Exp4                     -- binary
               | Exp4
  Exp4         = Exp4 addop Exp5                     -- binary
               | Exp5
  Exp5         = Exp5 mulop Exp6                     -- binary
               | Exp6
  Exp6         = Exp6 "**" Exp7                      -- binary
               | Exp7
  Exp7         = "-" Exp8                            -- negation
               | Exp8
  Exp8         = Lvalue | Literal | Rule | Arr

  Literal      = numlit
               | strlit
               | boolit
               | null                                -- null

  Lvalue       = Lvalue "[" Exp1 (":" Exp1)? "]"     -- subscripted
               | Lvalue "." (Call | id)              -- field
               | Call
               | id                                  -- id
  Call         = Lvalue "(" ListOf<Argument, ","> ")"
  Argument     = (id "=")? Exp1
  Return       = return Exp1                         -- returnExpression
               | return                              -- returnNothing

  Type         = arr "[" Type "]"                     -- array
               | boo
               | dub
               | int
               | str

  arr          = "arr" ~idrest
  boo          = "boo" ~idrest
  break        = "break" ~idrest
  dub          = "dub" ~idrest
  else         = "else" ~idrest
  elif         = "elif" ~idrest
  false        = "false" ~idrest
  fnc          = "fnc" ~idrest
  for          = "for" ~idrest
  hiss         = "hiss" ~idrest
  if           = "if" ~idrest
  in           = "in" ~idrest
  int          = "int" ~idrest
  let          = "let" ~idrest
  null         = "null" ~idrest
  return       = "return" ~idrest
  str          = "str" ~idrest
  true         = "true" ~idrest
  while        = "while" ~idrest

  keyword      = arr | boo | break | dub | else | elif | false | fnc | for | hiss
               | if | in | int | let | null | return | str | true | while

  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"

  indent      =  "⇨"
  dedent      =  "⇦"

  Rule         = "@" relop Exp1
  Arr          =  "[" ListOf<Exp1, ","> "]"
  Print        = "hiss(" Exp1 ")"
  numlit       =  digit+ ("." digit+)?
  strlit       = "\"" (~"\""any)* "\""
  boolit       = "true" | "false"

  escape       = "\\" ("\\" | "\"" | "n" | "t")
  assignop     = "=" | "*=" | "/=" | "+=" | "-="
  mulop        = "*" | "%" | "//" |"/"
  addop        = "+" | "-"
  relop        = "<=" | "!=" | "<" | ">=" | ">" | "=="
  space       := " " | "\t" | "\n" | comment
  comment      = "#" (~"\n" any)*                    -- singlelineComment
               | "~~~" (~"~~~:" any)* "~~~:"         -- multilineComment

}
